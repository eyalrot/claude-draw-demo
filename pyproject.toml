[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-draw"
version = "0.1.0"
description = "A Python library for creating 2D vector graphics with an intuitive API"
readme = "README.md"
authors = [
    {name = "Claude Draw Contributors"},
]
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["graphics", "vector", "drawing", "2D", "visualization"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

dependencies = [
    "pydantic>=2.0",
    "typing-extensions>=4.0.0; python_version<'3.10'",
]

[project.optional-dependencies]
dev = [
    "black==24.3.0",
    "ruff==0.3.4",
    "mypy==1.9.0",
    "pytest==8.1.1",
    "pytest-cov==5.0.0",
    "pre-commit==3.7.0",
    "sphinx==7.2.6",
    "sphinx-rtd-theme==2.0.0",
    "psutil>=5.9.0",
]

benchmark = [
    "psutil>=5.9.0",
]

test = [
    "pytest==8.1.1",
    "pytest-cov==5.0.0",
    "pytest-xdist==3.5.0",
]

docs = [
    "sphinx==7.2.6",
    "sphinx-rtd-theme==2.0.0",
    "sphinx-autodoc-typehints==2.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/claude-draw"
Documentation = "https://claude-draw.readthedocs.io"
Repository = "https://github.com/yourusername/claude-draw"
Issues = "https://github.com/yourusername/claude-draw/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["claude_draw*"]

[tool.setuptools.package-data]
claude_draw = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=claude_draw",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src/claude_draw"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]